//
//  SwiftPlgrConvTests.swift
//  
//
//  Created by ohmin839 on 2021/09/11.
//

import Foundation
import SwiftParamTest
import SwiftPlgrConv
import XCTest

final class SwiftPlgrConvTests: XCTestCase {
    func testToPolytonic() throws {
        assert(to: toPolytonic) {
            args("", expect: "")
            args("A", expect: "Α")
            args("A|", expect: "ᾼ")
            args("'A", expect: "Ά")
            args("`A", expect: "Ὰ")
            args("<A", expect: "Ἁ")
            args("<A|", expect: "ᾉ")
            args("<'A", expect: "Ἅ")
            args("<'A|", expect: "ᾍ")
            args("<`A", expect: "Ἃ")
            args("<`A|", expect: "ᾋ")
            args("<~A", expect: "Ἇ")
            args("<~A|", expect: "ᾏ")
            args(">A", expect: "Ἀ")
            args(">A|", expect: "ᾈ")
            args(">'A", expect: "Ἄ")
            args(">'A|", expect: "ᾌ")
            args(">`A", expect: "Ἂ")
            args(">`A|", expect: "ᾊ")
            args(">~A", expect: "Ἆ")
            args(">~A|", expect: "ᾎ")
            args("E", expect: "Ε")
            args("'E", expect: "Έ")
            args("`E", expect: "Ὲ")
            args("<E", expect: "Ἑ")
            args("<'E", expect: "Ἕ")
            args("<`E", expect: "Ἓ")
            args(">E", expect: "Ἐ")
            args(">'E", expect: "Ἔ")
            args(">`E", expect: "Ἒ")
            args("^E", expect: "Η")
            args("^E|", expect: "ῌ")
            args("'^E", expect: "Ή")
            args("`^E", expect: "Ὴ")
            args("<^E", expect: "Ἡ")
            args("<^E|", expect: "ᾙ")
            args("<'^E", expect: "Ἥ")
            args("<'^E|", expect: "ᾝ")
            args("<`^E", expect: "Ἣ")
            args("<`^E|", expect: "ᾛ")
            args("<~^E", expect: "Ἧ")
            args("<~^E|", expect: "ᾟ")
            args(">^E", expect: "Ἠ")
            args(">^E|", expect: "ᾘ")
            args(">'^E", expect: "Ἤ")
            args(">'^E|", expect: "ᾜ")
            args(">`^E", expect: "Ἢ")
            args(">`^E|", expect: "ᾚ")
            args(">~^E", expect: "Ἦ")
            args(">~^E|", expect: "ᾞ")
            args("I", expect: "Ι")
            args("'I", expect: "Ί")
            args("`I", expect: "Ὶ")
            args("<I", expect: "Ἱ")
            args("<'I", expect: "Ἵ")
            args("<`I", expect: "Ἳ")
            args("<~I", expect: "Ἷ")
            args(">I", expect: "Ἰ")
            args(">'I", expect: "Ἴ")
            args(">`I", expect: "Ἲ")
            args(">~I", expect: "Ἶ")
            args("\"I", expect: "Ϊ")
            args("O", expect: "Ο")
            args("'O", expect: "Ό")
            args("`O", expect: "Ὸ")
            args("<O", expect: "Ὁ")
            args("<'O", expect: "Ὅ")
            args("<`O", expect: "Ὃ")
            args(">O", expect: "Ὀ")
            args(">'O", expect: "Ὄ")
            args(">`O", expect: "Ὂ")
            args("U", expect: "Υ")
            args("'U", expect: "Ύ")
            args("`U", expect: "Ὺ")
            args("<U", expect: "Ὑ")
            args("<'U", expect: "Ὕ")
            args("<`U", expect: "Ὓ")
            args("<~U", expect: "Ὗ")
            args("\"U", expect: "Ϋ")
            args("Y", expect: "Υ")
            args("'Y", expect: "Ύ")
            args("`Y", expect: "Ὺ")
            args("<Y", expect: "Ὑ")
            args("<'Y", expect: "Ὕ")
            args("<`Y", expect: "Ὓ")
            args("<~Y", expect: "Ὗ")
            args("\"Y", expect: "Ϋ")
            args("^O", expect: "Ω")
            args("^O|", expect: "ῼ")
            args("'^O", expect: "Ώ")
            args("`^O", expect: "Ὼ")
            args("<^O", expect: "Ὡ")
            args("<^O|", expect: "ᾩ")
            args("<'^O", expect: "Ὥ")
            args("<'^O|", expect: "ᾭ")
            args("<`^O", expect: "Ὣ")
            args("<`^O|", expect: "ᾫ")
            args("<~^O", expect: "Ὧ")
            args("<~^O|", expect: "ᾯ")
            args(">^O", expect: "Ὠ")
            args(">^O|", expect: "ᾨ")
            args(">'^O", expect: "Ὤ")
            args(">'^O|", expect: "ᾬ")
            args(">`^O", expect: "Ὢ")
            args(">`^O|", expect: "ᾪ")
            args(">~^O", expect: "Ὦ")
            args(">~^O|", expect: "ᾮ")
            args("B", expect: "Β")
            args("G", expect: "Γ")
            args("D", expect: "Δ")
            args("Z", expect: "Ζ")
            args("Th", expect: "Θ")
            args("K", expect: "Κ")
            args("L", expect: "Λ")
            args("M", expect: "Μ")
            args("N", expect: "Ν")
            args("X", expect: "Ξ")
            args("P", expect: "Π")
            args("R", expect: "Ρ")
            args("<R", expect: "Ῥ")
            args("S", expect: "Σ")
            args("T", expect: "Τ")
            args("Ph", expect: "Φ")
            args("Kh", expect: "Χ")
            args("Ps", expect: "Ψ")
            args("a", expect: "α")
            args("a|", expect: "ᾳ")
            args("'a", expect: "ά")
            args("'a|", expect: "ᾴ")
            args("`a", expect: "ὰ")
            args("`a|", expect: "ᾲ")
            args("~a", expect: "ᾶ")
            args("~a|", expect: "ᾷ")
            args("<a", expect: "ἁ")
            args("<a|", expect: "ᾁ")
            args("<'a", expect: "ἅ")
            args("<'a|", expect: "ᾅ")
            args("<`a", expect: "ἃ")
            args("<`a|", expect: "ᾃ")
            args("<~a", expect: "ἇ")
            args("<~a|", expect: "ᾇ")
            args(">a", expect: "ἀ")
            args(">a|", expect: "ᾀ")
            args(">'a", expect: "ἄ")
            args(">'a|", expect: "ᾄ")
            args(">`a", expect: "ἂ")
            args(">`a|", expect: "ᾂ")
            args(">~a", expect: "ἆ")
            args(">~a|", expect: "ᾆ")
            args("e", expect: "ε")
            args("'e", expect: "έ")
            args("`e", expect: "ὲ")
            args("<e", expect: "ἑ")
            args("<'e", expect: "ἕ")
            args("<`e", expect: "ἓ")
            args(">e", expect: "ἐ")
            args(">'e", expect: "ἔ")
            args(">`e", expect: "ἒ")
            args("^e", expect: "η")
            args("^e|", expect: "ῃ")
            args("'^e", expect: "ή")
            args("'^e|", expect: "ῄ")
            args("`^e", expect: "ὴ")
            args("`^e|", expect: "ῂ")
            args("~^e", expect: "ῆ")
            args("~^e|", expect: "ῇ")
            args("<^e", expect: "ἡ")
            args("<^e|", expect: "ᾑ")
            args("<'^e", expect: "ἥ")
            args("<'^e|", expect: "ᾕ")
            args("<`^e", expect: "ἣ")
            args("<`^e|", expect: "ᾓ")
            args("<~^e", expect: "ἧ")
            args("<~^e|", expect: "ᾗ")
            args(">^e", expect: "ἠ")
            args(">^e|", expect: "ᾐ")
            args(">'^e", expect: "ἤ")
            args(">'^e|", expect: "ᾔ")
            args(">`^e", expect: "ἢ")
            args(">`^e|", expect: "ᾒ")
            args(">~^e", expect: "ἦ")
            args(">~^e|", expect: "ᾖ")
            args("i", expect: "ι")
            args("'i", expect: "ί")
            args("`i", expect: "ὶ")
            args("~i", expect: "ῖ")
            args("<i", expect: "ἱ")
            args("<'i", expect: "ἵ")
            args("<`i", expect: "ἳ")
            args("<~i", expect: "ἷ")
            args(">i", expect: "ἰ")
            args(">'i", expect: "ἴ")
            args(">`i", expect: "ἲ")
            args(">~i", expect: "ἶ")
            args("\"i", expect: "ϊ")
            args("\"'i", expect: "ΐ")
            args("\"`i", expect: "ῒ")
            args("\"~i", expect: "ῗ")
            args("o", expect: "ο")
            args("'o", expect: "ό")
            args("`o", expect: "ὸ")
            args("<o", expect: "ὁ")
            args("<'o", expect: "ὅ")
            args("<`o", expect: "ὃ")
            args(">o", expect: "ὀ")
            args(">'o", expect: "ὄ")
            args(">`o", expect: "ὂ")
            args("u", expect: "υ")
            args("'u", expect: "ύ")
            args("`u", expect: "ὺ")
            args("~u", expect: "ῦ")
            args("<u", expect: "ὑ")
            args("<'u", expect: "ὕ")
            args("<`u", expect: "ὓ")
            args("<~u", expect: "ὗ")
            args(">u", expect: "ὐ")
            args(">'u", expect: "ὔ")
            args(">`u", expect: "ὒ")
            args(">~u", expect: "ὖ")
            args("\"u", expect: "ϋ")
            args("\"'u", expect: "ΰ")
            args("\"`u", expect: "ῢ")
            args("\"~u", expect: "ῧ")
            args("y", expect: "υ")
            args("'y", expect: "ύ")
            args("`y", expect: "ὺ")
            args("~y", expect: "ῦ")
            args("<y", expect: "ὑ")
            args("<'y", expect: "ὕ")
            args("<`y", expect: "ὓ")
            args("<~y", expect: "ὗ")
            args(">y", expect: "ὐ")
            args(">'y", expect: "ὔ")
            args(">`y", expect: "ὒ")
            args(">~y", expect: "ὖ")
            args("\"y", expect: "ϋ")
            args("\"'y", expect: "ΰ")
            args("\"`y", expect: "ῢ")
            args("\"~y", expect: "ῧ")
            args("^o", expect: "ω")
            args("^o|", expect: "ῳ")
            args("'^o", expect: "ώ")
            args("'^o|", expect: "ῴ")
            args("`^o", expect: "ὼ")
            args("`^o|", expect: "ῲ")
            args("~^o", expect: "ῶ")
            args("~^o|", expect: "ῷ")
            args("<^o", expect: "ὡ")
            args("<^o|", expect: "ᾡ")
            args("<'^o", expect: "ὥ")
            args("<'^o|", expect: "ᾥ")
            args("<`^o", expect: "ὣ")
            args("<`^o|", expect: "ᾣ")
            args("<~^o", expect: "ὧ")
            args("<~^o|", expect: "ᾧ")
            args(">^o", expect: "ὠ")
            args(">^o|", expect: "ᾠ")
            args(">'^o", expect: "ὤ")
            args(">'^o|", expect: "ᾤ")
            args(">`^o", expect: "ὢ")
            args(">`^o|", expect: "ᾢ")
            args(">~^o", expect: "ὦ")
            args(">~^o|", expect: "ᾦ")
            args("b", expect: "β")
            args("g", expect: "γ")
            args("d", expect: "δ")
            args("z", expect: "ζ")
            args("th", expect: "θ")
            args("k", expect: "κ")
            args("l", expect: "λ")
            args("m", expect: "μ")
            args("n", expect: "ν")
            args("x", expect: "ξ")
            args("p", expect: "π")
            args("r", expect: "ρ")
            args("<r", expect: "ῥ")
            args(">r", expect: "ῤ")
            args("s", expect: "ς")
            args("c", expect: "σ")
            args("t", expect: "τ")
            args("ph", expect: "φ")
            args("kh", expect: "χ")
            args("ps", expect: "ψ")
            args("sa", expect: "σα")
            args("ssa", expect: "σσα")
            args("NG", expect: "ΓΓ")
            args("NK", expect: "ΓΚ")
            args("NX", expect: "ΓΞ")
            args("NKh", expect: "ΓΧ")
            args("ng", expect: "γγ")
            args("nk", expect: "γκ")
            args("nx", expect: "γξ")
            args("nkh", expect: "γχ")
            args(",", expect: ",")
            args(";", expect: "·")
            args(".", expect: ".")
            args("?", expect: ";")
            args("d''", expect: "δ'")
            args("<<", expect: "«")
            args(">>", expect: "»")
            args("--", expect: "—")
            args(" ", expect: " ")
            args("\t", expect: "\t")
            args("\n", expect: "\n")
            args("\r\n", expect: "\r\n")
            args("(", expect: "(")
            args(")", expect: ")")
            args("[", expect: "[")
            args("]", expect: "]")
            args("<", expect: "<")
            args(">", expect: ">")
            args(">'anthr^opos", expect: "ἄνθρωπος")
        }
    }
}
